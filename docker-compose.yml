
services:
  app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: logmanager_app
    volumes:
      - ./backend:/var/www
    networks:
      - logmanager_net
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "${APP_PORT:-8000}:8000"
    environment: &app_env # <-- Âncora YAML para reutilizar env vars
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASS}
    restart: unless-stopped

  # WORKERS
  
  # Worker para tarefas de pedidos
  worker_orders:
    build:
      context: ./backend
      dockerfile: Dockerfile
    # Escuta múltiplas filas, separadas por vírgula
    command: php artisan queue:work --queue=orders.sync,orders.label,orders.status --verbose --tries=3 --timeout=90
    volumes:
      - ./backend:/var/www
    networks:
      - logmanager_net
    depends_on:
      - mysql
      - rabbitmq
      - app
    environment: *app_env
    restart: unless-stopped
  
  # Infra
  mysql:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - logmanager_net
    ports:
      - "${DB_PORT:-3306}:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${DB_USERNAME}", "-p${DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.13-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - logmanager_net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Front
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - logmanager_net
    depends_on:
      - app
    restart: unless-stopped

networks:
  logmanager_net:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  rabbitmq_data:
    driver: local